<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="configuration">
    <title>Configuration Reference</title>
    <section>
        <title>log</title>
    
    
    <para>
            <programlisting language="python">log:
  level: warn
  loggers:
    com.foo:
      level: debug
    com.example:
      level: debug
  appenders:
    - type: file
      logFormat: '%c{20}: %m%n'
      file: target/logback/testRun_Debug.log</programlisting>
        </para>
        <para>"log" is a root element of the Logback configuration and is bound to a <link
                xlink:href="https://github.com/bootique/bootique-logback/blob/master/bootique-logback/src/main/java/io/bootique/logback/LogbackContextFactory.java"
                    ><code>LogbackContextFactory</code></link> object. It supports the following
            properties:</para>
    <table frame="void">
        <caption>"log" Element Property Reference</caption>
        <col width="20%"/>
        <col width="15%"/>
        <col width="65%"/>
        <thead>
            <tr>
                <th>Property</th>
                <th>Default</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
                <tr>
                    <td><code>appenders</code></td>
                    <td>console appender</td>
                    <td>A list of appenders to output logs to. See below.</td>
                </tr>
                <tr>
                    <td><code>level</code></td>
                    <td><code>INFO</code></td>
                    <td>A default logging level. Can be overridden per logger.</td>
                </tr>
                <tr>
                    <td><code>loggers</code></td>
                    <td>none</td>
                    <td>A map of logger factories by logger name. Logger name is a package name
                        (applied recursively) or class name. See below.</td>
                </tr>
                <tr>
                    <td><code>useLogbackConfig</code></td>
                    <td><code>false</code></td>
                    <td>If true, all other logback settings areignored and the user is expected to
                        provide its own config file per <link
                            xlink:href="http://logback.qos.ch/manual/configuration.html">Logback
                            documentation</link>. This is only needed for a few advanced options not
                        directly available via Bootique config. </td>
                </tr>
        </tbody>
    </table>
    </section>
    <section>
        <title>log.appenders</title>
        <para><programlisting language="python">log:
  appenders:
    - type: file
      logFormat: '%c{20}: %m%n'
      file: /var/log/myapp.log
    - type: console
      logFormat: '%c{20}: %m%n'</programlisting>Lists
            appenders to sends the logs to. If the list is empty, console appender is used with
            default settings. Currently available appenders are "console" and "file":</para>
        <table frame="void">
            <caption>"console" Appender Property Reference</caption>
            <col width="20%"/>
            <col width="53%"/>
            <col width="27%"/>
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Default</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>logFormat</code></td>
                    <td><code>%-5p [%d{ISO8601,UTC}] %thread %c{20}: %m%n%rEx</code></td>
                    <td>A format of the log lines. See Logback <link
                            xlink:href="http://logback.qos.ch/manual/layouts.html#ClassicPatternLayout"
                            >PatternLayout</link> for details.</td>
                </tr>
                <tr>
                    <td><code>target</code></td>
                    <td><code>stdout</code></td>
                    <td>Whether to log to standard output or standard error. Possible values are
                            <code>stdout</code> and <code>stderr</code></td>
                </tr>
            </tbody>
        </table>
        <table frame="void">
            <caption>"file" Appender Property Reference</caption>
            <col width="20%"/>
            <col width="53%"/>
            <col width="27%"/>
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Default</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>logFormat</code></td>
                    <td><code>%-5p [%d{ISO8601,UTC}] %thread %c{20}: %m%n%rEx</code></td>
                    <td>A format of the log lines. See Logback <link
                            xlink:href="http://logback.qos.ch/manual/layouts.html#ClassicPatternLayout"
                            >PatternLayout</link> for details.</td>
                </tr>
                <tr>
                    <td><code>file</code></td>
                    <td>none</td>
                    <td>A name of a file to send the log to.</td>
                </tr>
                <tr>
                    <td><code>rollingPolicy</code></td>
                    <td>none</td>
                    <td>An object that defines a log rotation policy. Examples are given below. </td>
                </tr>
            </tbody>
        </table>
        <para>There are a few ways log file rotation can be configured for the "file" appender, as
            defined by the <code>rollingPolicy</code>. Out of the box the following Logback policies
            are supported: <link
                xlink:href="http://logback.qos.ch/manual/appenders.html#FixedWindowRollingPolicy"
                    ><code>fixedWindow</code></link>, <link
                xlink:href="http://logback.qos.ch/manual/appenders.html#TimeBasedRollingPolicy"
                    ><code>time</code></link>, <link><code>sizeAndTime</code></link>.</para>
        <section>
            <title>"fixedWindow" Rolling Policy</title>
            <para><programlisting>log:
  appenders:
    - type: file
      logFormat: '%c{20}: %m%n'
      file: /var/log/myapp.log
      rollingPolicy:
        type: fixedWindow
        fileNamePattern: '/var/log/myapp-%i.log'
        historySize: 5
        fileSize: 20</programlisting>"fixedWindow"
                policy rotates the main log file when it reaches a certain size, keeping one or more
                rotated files.<table frame="void">
                    <caption>"fixedWindow" rolling policy Property Reference</caption>
                    <col width="20%"/>
                    <col width="53%"/>
                    <col width="27%"/>
                    <thead>
                        <tr>
                            <th>Property</th>
                            <th>Default</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><code>fileNamePattern</code></td>
                            <td>none</td>
                            <td>A pattern of rotated file name. Must contain <code>%i</code>
                                somewhere in the pattern (replaced by a number during
                                rotation).</td>
                        </tr>
                        <tr>
                            <td><code>historySize</code></td>
                            <td>none (unlimited)</td>
                            <td>A max number of rotated files to keep.</td>
                        </tr>
                        <tr>
                            <td><code>fileSize</code></td>
                            <td>none</td>
                            <td>Max file size that causes rotation. Expressed in bytes, kilobytes,
                                megabytes or gigabytes by suffixing a numeric value with KB, MB and
                                respectively GB. For example: 5000000, 5000KB, 5MB and 2GB.</td>
                        </tr>
                    </tbody>
                </table></para>
        </section>
        <section>
            <title>"time" Rolling Policy</title>
            <para><programlisting>log:
  appenders:
    - type: file
      logFormat: '%c{20}: %m%n'
      file: /var/log/myapp.log
      rollingPolicy:
        type: time
        fileNamePattern: '/var/log/myapp-%d{yyyyMMddHHmmss}.log'</programlisting>"time"
                policy rotates the main log file at a fixed time interval determined by the file
                name pattern.<table frame="void">
                    <caption>"time" rolling policy Property Reference</caption>
                    <col width="20%"/>
                    <col width="53%"/>
                    <col width="27%"/>
                    <thead>
                        <tr>
                            <th>Property</th>
                            <th>Default</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><code>fileNamePattern</code></td>
                            <td>none</td>
                            <td>A pattern of rotated file name. Its value should consist of the name
                                of the file, plus a suitably placed %d conversion specifier. The %d
                                conversion specifier may contain a date-and-time pattern as
                                specified by the <code>java.text.SimpleDateFormat</code> class. If
                                the date-and-time pattern is omitted, then the default pattern
                                    <code>yyyy-MM-dd</code> is assumed. The rollover interval is
                                inferred from the value of the pattern.</td>
                        </tr>
                        <tr>
                            <td><code>historySize</code></td>
                            <td>none (unlimited)</td>
                            <td>A max number of rotated files to keep.</td>
                        </tr>
                        <tr>
                            <td><code>totalSize</code></td>
                            <td>none</td>
                            <td>Max size of all log files combined. Expressed in bytes, kilobytes,
                                megabytes or gigabytes by suffixing a numeric value with KB, MB and
                                respectively GB. For example: 5000000, 5000KB, 5MB and 2GB.</td>
                        </tr>
                    </tbody>
                </table></para>
        </section>
        <section>
            <title>"sizeAndTime" Rolling Policy</title>
            <para><programlisting>log:
  appenders:
    - type: file
      logFormat: '%c{20}: %m%n'
      file: /var/log/myapp.log
      rollingPolicy:
        type: sizeAndTime
        fileNamePattern: '/var/log/myapp-%d{yyyyMMddHHmmss}.%i.log'
        historySize: 5
        fileSize: 50
        totalSize: 150</programlisting>"sizeAndTime"
                policy rotates the main log file either at a fixed time interval determined by the
                file name pattern or when the log file reaches a certain size.<table frame="void">
                    <caption>"sizeAndTime" rolling policy Property Reference</caption>
                    <col width="20%"/>
                    <col width="53%"/>
                    <col width="27%"/>
                    <thead>
                        <tr>
                            <th>Property</th>
                            <th>Default</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><code>fileNamePattern</code></td>
                            <td>none</td>
                            <td>A pattern of rotated file name. Its value should consist of the name
                                of the file, plus a suitably placed %d conversion specifier. The %d
                                conversion specifier may contain a date-and-time pattern as
                                specified by the <code>java.text.SimpleDateFormat</code> class. If
                                the date-and-time pattern is omitted, then the default pattern
                                    <code>yyyy-MM-dd</code> is assumed. The rollover interval is
                                inferred from the value of the pattern.</td>
                        </tr>
                        <tr>
                            <td><code>historySize</code></td>
                            <td>none (unlimited)</td>
                            <td>A max number of rotated files to keep.</td>
                        </tr>
                        <tr>
                            <td><code>totalSize</code></td>
                            <td>none</td>
                            <td>Max size of all log files combined. Expressed in bytes, kilobytes,
                                megabytes or gigabytes by suffixing a numeric value with KB, MB and
                                respectively GB. For example: 5000000, 5000KB, 5MB and 2GB.</td>
                        </tr>
                        <tr>
                            <td><code>fileSize</code></td>
                            <td>none</td>
                            <td>Max file size that causes rotation. Expressed in bytes, kilobytes,
                                megabytes or gigabytes by suffixing a numeric value with KB, MB and
                                respectively GB. For example: 5000000, 5000KB, 5MB and 2GB.</td>
                        </tr>
                    </tbody>
                </table></para>
        </section>
    </section>
    
    <section>
        <title>log.loggers</title>
        <para><programlisting language="python">log:
  loggers:
    com.foo:
      level: debug
    com.example:
      level: debug</programlisting>This
            is a map of <link
                xlink:href="https://github.com/bootique/bootique-logback/blob/master/bootique-logback/src/main/java/io/bootique/logback/LoggerFactory.java"
                >logger factories</link> by logger name. Logger name is either a package name
            (applied recursively to subpackages and their classes) or a class name. Each
            LoggerFactory has the following properties:</para>
        <table frame="void">
            <caption>Logger Property Reference</caption>
            <col width="20%"/>
            <col width="53%"/>
            <col width="27%"/>
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Default</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>level</code></td>
                    <td><code>INFO</code></td>
                    <td>Log level for a particular logger. Can be OFF, ERROR, WARN, INFO, DEBUG,
                        TRACE, ALL</td>
                </tr>
            </tbody>
        </table>
    </section>
</chapter>
